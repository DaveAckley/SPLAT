#!/usr/bin/perl -w         # -*- perl -*-
use File::Basename;
use lib dirname(__FILE__)."/lib";
use SPLATtr;

my $scriptPath = dirname(__FILE__);

sub usageDie {
    my ($fmt, @args) = @_;
    my $msg = sprintf $fmt,@args;
    print STDERR "Error: $msg\n";
    print STDERR "Usage: $0 INFILE.splat\n";
    exit 2;
}

sub compileOneSPLATFile {
    my ($infile) = @_;
    my $splattr = SPLATtr->new($infile);

    my $program = SPLATtrNodeProgram->newIfParse($splattr);
    if (defined $program) {
#        printf STDERR "$infile: parse OK\n";
    } else {
        my $uneatenLine = $splattr->readLine();
        SPLATtr::printfFatalError($uneatenLine, "Program parse failed");
        return undef;
    }

    my $ap = $program->analysisPhase();
    if (defined $ap) {
#        printf STDERR "$infile: analysis OK\n";
        $program = $ap;
    } else {
        SPLATtr::printfFatalError($program->{sourceLine}, "Program analysis failed");
        return undef;
    }

    my $ret = $program->codegenPhase();
    if ($ret) {
#        printf STDERR "$infile: codegen OK\n";
    } else {
        SPLATtr::printfFatalError($program->{sourceLine}, "Code generation failed");
        return undef;
    }
    my $errc = $splattr->{errorCount};
    if ($errc == 0) {
        my @ret = ($splattr->{outFileDir},$splattr->{outFileName});
        $program->decircle();
        printf STDERR "$infile: OK\n";
        return @ret;
    }
    my $errs = "s";
    $errs = "" if $errc == 1;
    SPLATtr::printfFatalError($program->{sourceLine}, "%s error%s detected",
                              $errc,$errs);
    return undef;
}

my $ulamDir = "/home/ackley/papers/MF/asrepo/RT13/code/ULAM-fork/ULAM";
#my $ulamDir = "/usr";

my $DEBUG = 1;

sub buildULAMFiles {
    my ($dirref,@ulamsEtc) = @_;
    my $ulamPath = "$ulamDir/bin/ulam";
    my $includes = "--sd $scriptPath/lib";
    if (scalar(keys %{$dirref}) > 0) {
        $includes .= " --sd ".join(" --sd ",keys %{$dirref});
    }
    if ($DEBUG == 1) {
        $includes = "-g $includes";
    } elsif ($DEBUG == -1) {
        $includes = "-o $includes";
    }
    my $cmd = "$ulamPath $includes @ulamsEtc";
    print STDERR "RN:$cmd\n";
    my $ret = `$cmd`;
    if ($ret ne "") {
        print STDERR "$ret";
        return 1;
    }
    return 1;
}

sub main {
    my (@args) = @_;
    my @splatsDied;
    my @ulamsGenned;
    my @ulamsSourced;
    my @splatSources;
    my %ulamGenDirs;
    my $mfzfile = undef;
    $DEBUG = 0;
    foreach my $arg (@args) {
        if ($arg eq "-g") {
            SPLATtr::usageDie("%s","-g after -o")
                if $DEBUG == -1;
            $DEBUG = 1;
            next;
        }
        if ($arg eq "-o") {
            SPLATtr::usageDie("%s","-o after -g")
                if $DEBUG == 1;
            $DEBUG = -1;
            next;
        }
        if ($arg =~ /.*[.]mfz$/) {
            SPLATtr::usageDie("%s","Multiple .mfz files ($mfzfile, $arg)")
                if defined($mfzfile) && $mfzfile ne $arg;
            $mfzfile = $arg;
            next;
        }
        if ($arg =~ /.*[.]ulam$/) {  # Pass .ulam files through
            push @ulamsSourced, $arg;
            next;
        }

        SPLATtr::usageDie("%s","Not SPLAT file '$arg'")
            unless $arg =~ /.*[.]splat$/;
      
        my ($ulamDir,$ulamfile) = compileOneSPLATFile($arg);
        if (defined $ulamfile) {
            push @ulamsGenned, $ulamfile;
            push @splatSources, $arg;
            $ulamGenDirs{$ulamDir}++;
        } else {
            push @splatsDied, $arg;
        }
    }
    if (scalar(@splatsDied) > 0) {
        print STDERR "SPLAT compilation failed for ".join("\n  ",@splatsDied)."\n";
        exit 3;
    }
    $mfzfile = "a.mfz" unless defined $mfzfile;
        
    my $ret = buildULAMFiles(\%ulamGenDirs,$mfzfile,@ulamsGenned,@ulamsSourced,@splatSources);
    if (!$ret) {
        print STDERR "ULAM build failed\n";
        exit 4;
    }
    print STDERR "Done\n";
    exit 0;
}

main(@ARGV);
